/** 
  * A list implemented using a sorted doubly-linked list 
  * @author         Amy Takayesu 
  * @class               ICS311
  * @date           October 17, 2013
  */

public class DLLDynamicSet<E> implements DynamicSet{

          /** 
            * A node in a doubly-linked list
            * @author       Amy Takayesu 
            * @class               ICS311
            * @date         October 17, 2013
            */
          
          private static class LinkedNode<T> {
            private String item = null;
            private LinkedNode<T> next = null;
            private LinkedNode<T> prev = null;
          
          /** 
            * constructor to build a node with no successor
            * @param the value to be stored by this node
            */
            private LinkedNode(String value) {
              item = value;
              next = null;
              prev = null;
            }
          
          
          /** 
            * constructor to build a node with specified (maybe null) successor and (maybe null) predecessor
            * @param the value to be stored by this node
            * @param the next field for this node
            */
            private LinkedNode(String value, LinkedNode<T> nextnode, LinkedNode<T> prevnode) {
              item = value;
              next = nextnode;
              prev = prevnode;
            }
            
            public Object getItem() {
                    return this.item;
            }
            
            public void deleteItem() {
                    this.item = null;
            }
            public void setNext(LinkedNode<T> node) {
                    this.next = node;
            }
            
            public void setPrev(LinkedNode<T> node) {
                    this.prev = node;
            }
            
            public LinkedNode<T> getNext() {
                    return this.next;
            }
            
            public LinkedNode<T> getPrev() {
                    return this.prev;
            }
          }
  // end of the LinkedNode definition


  // this is the start of the linked list.  If the list is empty, it is null
  public LinkedNode<E> head;

  /** 
    * initializes an empty linked list
    */
  public DLLDynamicSet() {
    head = null;
  }

  /** recursive private method, called by the public wrapper method 
    * @param the head of the list (may be null if at the end)
    * @return the size of the list
    * @note adapted from Edo Biagioni ICS211 Fall 2011
    */
  private int size(LinkedNode<E> current) {
    if (current == null) {
      return 0;  // an empty list has size 0
    }  // a non-empty list has size 1 more than the rest of the list:
    return 1 + size (current.next);
  }
   
  /** public wrapper method, calls the private recursive method 
    * @param none
    * @return the size of the list
    */
  public int size() {
    return size(head);
  }

  
  /** Inserts element e in the set under key k in sorted alphabetical order
   * @param the value to add and the element to set
   */
 public void insert(String value, Object e) {
         LinkedNode<E> node = head;
         LinkedNode<E> nodeprev = null;
         LinkedNode<E> newNode = null;
         
         if(node == null) {
                 newNode = new LinkedNode<E>(value);
                 head = newNode;
         }
         else {
                 while((node != null) && (node.item.compareToIgnoreCase(value) <= 0)) {
                         nodeprev = node;
                         node = node.next;
                 }
                 //case: empty list
                 if(node == null) {
                         newNode = new LinkedNode<E>(value, null, nodeprev);
                         node = newNode;
                         nodeprev.setNext(node);
                 }
                 else {
                	 	//case: insert in middle of list
                	 	 if(node != head && node.getNext() != null) {
                	 		 newNode= new LinkedNode<E>(value, node, nodeprev);
                	 		 node.setPrev(newNode);
                	 		 nodeprev.setNext(node.prev);
                	 	 }
                	 	 //case: add to start of list
                	 	 else if(node == head) {
                	 		 newNode = new LinkedNode<E>(value, node, null);
                	 		 head.setPrev(newNode);
                	 		 head = newNode;
                	 	 }
                	 	 //add to end of list
                	 	 else {
                	 		 newNode = new LinkedNode<E>(value, null, node);
                	 		 node.setNext(newNode);
                	 	 }
                 }
         }
 }
   
  /** public wrapper method, calls the private recursive method 
    * @param the object to remove
    */
  public void delete(String value) {
    try {
    	LinkedNode<E> node = (LinkedNode<E>)search(head, value);
    	node.getPrev().setNext(node.getNext());
    	node.getNext().setPrev(node.getNext());
    	node.deleteItem();
    }
    catch(Exception e) {
    	System.out.println("Item could not be deleted because item could not be found.");
    }
  }
  
  /** Finds an Object with the key k and returns a pointer to it, or null if not found 
   * @param the key to search for
   */
 public Object search(LinkedNode<E> node, String value) {
   if(node == null){
           return null;
   }
   while(!node.item.equals(value)) {
	   if(node.next != null) {
		   node = node.next;
	   }
	   //item does not exist in list
	   else {
		   return null;
	   }
   }
   return node;
 }
 
 /** Finds an Object with the key k and returns a pointer to it, or null if not found 
  * @param the key to search for
  */
public Object search(String value) {
        @SuppressWarnings("unchecked")
        LinkedNode<E> node = (LinkedNode<E>)search(head, value);
        return node.getItem();
}
 
 /** Find minimum (head) of list
  * @param none
  */
public Object minimum(){
        if(head != null) {
                return head.getItem();
        }
        else {
                return null;
        }
}

/** Find maximum (tail) of list
 * @param none
 */
public Object maximum() {
        LinkedNode<E> node = head;
        if(head == null) {
                return null;
        }
        else {
                while(node.next != null) {
                        node = node.next;
                }
                return node.getItem();
        }
}

/** Find the successor of the given value in the list
 * @param the object to find the successor to
 */
public Object successor(String value) {
        @SuppressWarnings("unchecked")
        LinkedNode<E> node = (LinkedNode<E>)search(head, value);
        if(node.getNext() != null) {
        	return node.getNext().getItem();
        }
        else {
        	return null;
        }
}

/** Find the predecessor of the given value in the list
 * @param the object to find the predeccessor to
 */
public Object predecessor(String value) {
        @SuppressWarnings("unchecked")
        LinkedNode<E> node = (LinkedNode<E>)search(head,value);
        if(node != head) {
        	return node.getPrev().getItem();
        }
        else {
        	return null;
        }
}
 

  /** recursive private method, called by the public wrapper method 
    * @param the head of the list (may be null if we are at the end)
    * @return the string representing the list
    * @note adapted from Edo Biagioni ICS211 Fall 2011
    */
  private String toString(LinkedNode<E> node) {
    if (node == null) {
      return "";
    }
    if (node.next == null) {
      return node.item.toString();
    }
    return node.item.toString() + " <==> " + toString(node.next);
  }

  /** 
    * concatenates the elements of the linked list, separated by " <==> "
    * @return the string representation of the list
    */
  public String toString() {
    return toString(head);
  }
}
